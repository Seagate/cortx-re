pipeline {
	agent {
		node {
			label 'docker-rhel7.7.1908-s3-cortex-node'
		}
	}

	parameters {  
	    string(name: 'S3_URL', defaultValue: 'https://github.com/Seagate/cortx-s3server', description: 'Branch for S3Server')
        string(name: 'S3_BRANCH', defaultValue: 'main', description: 'Branch for S3Server')
		
		choice(
            name: 'MOTR_BRANCH', 
            choices: ['main','custom-ci', 'release', 'Cortx-v1.0.0_Beta'],
            description: 'Branch name to pick-up Motr components rpms'
        )

	}

	environment {
        env="dev"
		component="s3server"
        branch="$S3_BRANCH"
        os_version="rhel-7.7.1908"
        release_dir="/mnt/bigstorage/releases/cortx"
        build_upload_dir="$release_dir/components/github/opensource/$branch/$os_version/$env/$component/"
    }

	options {
		timeout(time: 55, unit: 'MINUTES')
		timestamps()  
	}
	
	stages {
	
		stage ("Dev Build") {
			stages {
				
			
				stage('Checkout') {
					steps {
						step([$class: 'WsCleanup'])
						checkout([$class: 'GitSCM', branches: [[name: "${S3_BRANCH}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'AuthorInChangelog'], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'cortx-admin-github', url: '${S3_URL}']]])
						sh label: 'Script', script: '''
						set +x
						echo "---------------------------------------------------------------------------"
						echo "Building & Running S3 from '${S3_BRANCH}'"
						echo "---------------------------------------------------------------------------"
						'''
						}
					}
				
				
				stage('Build s3server RPM') {
					steps {
						script { build_stage=env.STAGE_NAME }
								sh label: '', script: '''
								sed '/baseurl/d' /etc/yum.repos.d/mero_current_build.repo
								echo "baseurl=http://cortx-storage.colo.seagate.com/releases/eos/components/github/opensource/main/$os_version/$env/motr/current_build/"  >> /etc/yum.repos.d/mero_current_build.repo
								rm -f /etc/yum.repos.d/eos_7.7.1908.repo
								yum clean all
								rm -rf /var/cache/yum
								export build_number=${BUILD_ID}
								yum install cortx-motr{,-devel} -y
								yum erase log4cxx_eos-devel -q -y
								./rpms/s3/buildrpm.sh -P $PWD
							'''
					}
				}
				
				stage('Build s3iamcli RPM') {
					steps {
						script { build_stage=env.STAGE_NAME }
								sh label: '', script: '''
								export build_number=${BUILD_ID}
								./rpms/s3iamcli/buildrpm.sh -P $PWD
							'''
					}
				}

				stage ('Copy RPMS') {
					steps {
						script { build_stage=env.STAGE_NAME }
						sh label: 'Copy RPMS', script: '''	
							test -d $build_upload_dir/$BUILD_NUMBER && rm -rf $build_upload_dir/$BUILD_NUMBER
							mkdir -p $build_upload_dir/$BUILD_NUMBER
							cp /root/rpmbuild/RPMS/x86_64/*.rpm $build_upload_dir/$BUILD_NUMBER
							cp /root/rpmbuild/RPMS/noarch/*.rpm $build_upload_dir/$BUILD_NUMBER
						'''
					}
				}
				
				
				stage ('Repo Creation') {
					steps {
						script { build_stage=env.STAGE_NAME }
						sh label: 'Repo Creation', script: '''pushd $build_upload_dir/$BUILD_NUMBER
							rpm -qi createrepo || yum install -y createrepo
							createrepo .
							popd
						'''
					}
				}
				
				stage ('Tag last_successful') {
					steps {
						script { build_stage=env.STAGE_NAME }
						sh label: 'Tag last_successful', script: '''pushd  $build_upload_dir
							test -d  $build_upload_dir/last_successful && rm -f last_successful
							ln -s $build_upload_dir/$BUILD_NUMBER last_successful
							popd
						'''
					}
				}
			}	
		}
    }
}