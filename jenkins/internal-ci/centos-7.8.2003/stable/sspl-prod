pipeline {
	agent {
		node {
			label 'docker-cp-centos-7.8.2003-node'
		}
	}

    parameters { 
		string(name: 'dev_build_number', defaultValue: '1', description: 'Dev Build number')
    }

	environment {   
        env="prod"
		component="sspl"
        branch="stable"
        os_version="centos-7.8.2003"
        release_dir="/mnt/bigstorage/releases/cortx"
        build_upload_dir="$release_dir/components/github/$branch/$os_version/$env/$component"
        dev_build_number = "${params.dev_build_number}"
    }

	options {
		timeout(time: 30, unit: 'MINUTES')
		timestamps()
        ansiColor('xterm')  
        disableConcurrentBuilds()  
	}

	stages {
        stage('Checkout') {
            steps {
                script { build_stage=env.STAGE_NAME }
                dir ('cortx-sspl') {
                    checkout([$class: 'GitSCM', branches: [[name: '*/stable']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'AuthorInChangelog']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'cortx-admin-github', url: 'https://github.com/Seagate/cortx-sspl']]])
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script { build_stage=env.STAGE_NAME }
                sh label: '', script: '''
                    yum install sudo python-Levenshtein libtool doxygen python-pep8 openssl-devel graphviz check-devel -y
                '''
            }
        }

        stage('Build') {
            steps {
                script { build_stage=env.STAGE_NAME }
                sh label: 'Build', returnStatus: true, script: '''
                    set -xe
                    pushd cortx-sspl
                    VERSION=$(cat VERSION)
                    export build_number=$dev_build_number
                    #Execute build script
                    echo "Executing build script"
                    echo "VERSION:$VERSION"
                    ./jenkins/build.sh -l INFO
                    popd
                '''	
            }
        }
        
        stage ('Upload') {
            steps {
                script { build_stage=env.STAGE_NAME }
                sh label: 'Copy RPMS', script: '''
                    mkdir -p $build_upload_dir/$dev_build_number
                    cp /root/rpmbuild/RPMS/x86_64/*.rpm $build_upload_dir/$dev_build_number
                    cp /root/rpmbuild/RPMS/noarch/*.rpm $build_upload_dir/$dev_build_number
                '''
                sh label: 'Repo Creation', script: '''pushd $build_upload_dir/$dev_build_number
                    rpm -qi createrepo || yum install -y createrepo
                    createrepo .
                    popd
                '''
            }
        }
        
        stage ('Tag last_successful') {
            steps {
                script { build_stage=env.STAGE_NAME }
                sh label: 'Tag last_successful', script: '''pushd $build_upload_dir/
                    test -d $build_upload_dir/last_successful && rm -f last_successful
                    ln -s $build_upload_dir/$dev_build_number last_successful
                    popd
                '''
            }
        }
	}
}
