# #######################################################################################
# Description:
#-------------
#         This tasks starts csm deployment
# Reference:
#----------- 
#         https://github.com/Seagate/cortx-manager/wiki/CORTX-Manager-Single-Node-Deployment-on-VM-:-Manual
# Steps:
#--------
#      1. Pre-Requisites Installation
#      2. Install Cortx-Manager
#      3. Cortx-manager mini Provisioning
#      4. Start CORTX manager
##########################################################################################

- name: "[mini_provisioning] : Validate the required input arguments for this playbook"
  fail: msg="Variable '{{ item }}' is not defined"
  when: item not in vars
  with_items: "{{ REQUIRED_VARS }}"

# Add yum repositories
- name: "[mini_provisioning] : Copy yum repo"
  template:
    src: cortx.repo.j2
    dest: /etc/yum.repos.d/cortx.repo
  
# Refresh yum repo
- name: "[mini_provisioning] : Refresh yum repos"
  shell: yum clean all

# Install elasticsearch and consul
- name: "[mini_provisioning] : Install elasticsearch and consul"
  shell: "yum install -y java consul-1.7.8 elasticsearch-oss-6.8.8"

# Start consul
- name: "[mini_provisioning] : Restart consul"
  ansible.builtin.service:
    name: consul
    state: started
  ignore_errors: yes
  
# Start elasticsearch
- name: "[mini_provisioning] : Start elasticsearch"
  ansible.builtin.service:
    name: elasticsearch
    state: started

# Install csm agent and web
- name: "[mini_provisioning] : Install csm agent and cli"
  yum: 
    name: ["cortx-cli", "cortx-csm_agent"]
    state: present

# Get Machine ID
- name: "[mini_provisioning] : Get Machine ID" 
  shell: cat /etc/machine-id
  register: machineid_out

- set_fact:
    MACHINE_ID: "{{ machineid_out.stdout }}"

# Update machine-id
- name: "[mini_provisioning] : Update machine id" 
  shell: "sed -i 's/machine_id/{{ MACHINE_ID }}/g' /opt/seagate/cortx/csm/templates/csm_setup_conf_template.json"

# Execute CSM:Post_Install
- name: "[mini_provisioning] : Post Install" 
  shell: /opt/seagate/cortx/csm/bin/csm_setup post_install --config json:///opt/seagate/cortx/csm/templates/csm_setup_conf_template.json

# Execute CSM:Config
- name: "[mini_provisioning] : CSM Config" 
  shell: /opt/seagate/cortx/csm/bin/csm_setup config --config json:///opt/seagate/cortx/csm/templates/csm_setup_conf_template.json

# Execute CSM:Init
- name: "[mini_provisioning] : CSM Init" 
  shell: /opt/seagate/cortx/csm/bin/csm_setup init --config json:///opt/seagate/cortx/csm/templates/csm_setup_conf_template.json

# Start CSM Agent
- name: "[mini_provisioning] : Start csm_agent"
  shell: systemctl start csm_agent
  register: csm_agent_out
  ignore_errors: true

# Console Journalctl log
- name: "[mini_provisioning] : Journalctl log" 
  shell: journalctl --unit=csm_agent.service | tail -n 100
  when: csm_agent_out.rc != 0

  # TMP FIX 
- name: "[mini_provisioning] : Change /var/log/seagate permision"
  shell: chmod 777 -R /var/log/seagate
  when: csm_agent_out.rc != 0

# Start CSM Agent
- name: "[mini_provisioning] : Start csm_agent"
  shell: systemctl start csm_agent
  when: csm_agent_out.rc != 0

- name: "[mini_provisioning] : Get csm_agent Status"
  shell: systemctl status csm_agent

# Run CSM Sanity Test
- name: "[mini_provisioning] : Run Sanity Test"
  shell: csm_test -t /opt/seagate/cortx/csm/test/plans/cicd.pln -f /opt/seagate/cortx/csm/test/test_data/args.yaml -o /root/sanity_test.log
  register: csm_test_out
  failed_when: '"Failed:0" not in csm_test_out.stdout'