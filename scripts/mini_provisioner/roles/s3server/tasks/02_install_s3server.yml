
# #######################################################################################
# Description:
#-------------
#         This tasks installs cortx-s3server and dependent components (motr) from the provided build
# Reference:
#----------- 
#         https://github.com/Seagate/cortx-s3server/wiki/S3server-provisioning-on-single-node-cluster:-Manual#install-cortx-s3server-and-cortx-motr-packages
# Steps:
#--------
#      1. Install cortx-s3server, cortx-motr      
#      2. Create py-utils:confstore back-end
##########################################################################################

# Install openldap
- name: "[install_s3server] : Install S3server & dependent components (motr)"
  yum: 
    name: [ 'cortx-motr', 'cortx-s3server']
    state: present

# Install python pip package
- name: "[install_s3server] : Install python pip package"
  shell: pip3 install cryptography toml

# Get Cluster ID
- name: "[install_s3server] : Get Ipaddress" 
  shell: uuidgen
  register: clusterid_out

- set_fact:
    CLUSTER_ID: "{{ clusterid_out.stdout }}"

# Update s3 cluster id
- name: "[install_s3server] : Update Cluster ID" 
  shell: "sed -i 's/cluster_id:.*/cluster_id: {{ CLUSTER_ID }}/g' /opt/seagate/cortx/s3/s3backgrounddelete/s3_cluster.yaml"

# Generate s3ciper
- name: "[install_s3server] : Generate s3ciper key " 
  shell: s3cipher generate_key --const_key openldap
  register: s3cipher_out

# Create sgadmin pwd
- name: "[install_s3server] : Create sgiamadmin pwd" 
  shell: s3cipher encrypt --data '{{ LDAP_SGIAM_PWD }}' --key '{{ s3cipher_out.stdout }}' 
  register: sgadmin_pwd_enc

# Create rootdn pwd
- name: "[install_s3server] : Create rootdn pwd" 
  shell: s3cipher encrypt --data '{{ LDAP_ROOT_PWD }}' --key '{{ s3cipher_out.stdout }}'
  register: rootdn_pwd_enc

# Create bmc pwd
- name: "[install_s3server] : Create bmc pwd" 
  shell: s3cipher encrypt --data '{{ BMC_SECRET }}' --key '{{ s3cipher_out.stdout }}'
  register: bmc_secret_enc

# Get Hostname
- name: "[install_s3server] : Get Hostname" 
  shell: hostname
  register: hostname_out

# Get IP Address
- name: "[install_s3server] : Get Ipaddress" 
  shell: hostname -I | cut -d' ' -f2 | xargs
  register: ipaddress_out

# Get Machine ID
- name: "[install_s3server] : Get Machine ID" 
  shell: cat /etc/machine-id
  register: machineid_out

- set_fact:
    LDAP_SGIAM_PWD_ENC: "{{ sgadmin_pwd_enc.stdout }}"
    LDAP_ROOT_PWD_ENC: "{{ rootdn_pwd_enc.stdout }}"
    BMC_SECRET_ENC: "{{ bmc_secret_enc.stdout }}"
    HOSTNAME: "{{ hostname_out.stdout }}"
    IP_ADDRESS: "{{ ipaddress_out.stdout }}"
    MACHINE_ID: "{{ machineid_out.stdout }}"

# Create confstore.json in deployment node
- name: "[install_s3server] : Copy confstore json file"
  template:
    src: confstore.json.j2
    dest: /root/confstore.json

# Remove ldap confs
- name: "[install_prereq] : Remove ldap confs/files" 
  script: files/remove_ldap_installation.sh

# Install openldap
- name: "[install_prereq] : Install openldap"
  yum: 
    name: [ 'openldap-servers', 'openldap-clients']
    state: present